{"version":3,"sources":["components/Heading/Heading.js","components/GameContainer/GameContainer.js","utils/helpers.js","utils/variables.js","components/App/App.js","index.js"],"names":["Heading","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bestScore","localStorage","window","getItem","setState","score","setItem","_this$props","startNewGame","react_default","a","createElement","className","onClick","Component","GameContainer","cells","map","row","i","key","cell","j","sumDoubleCells","arr","arrLength","length","sum","splice","push","rotate90","rotateArr","ARROW_LEFT","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","START_INT","COLOR_CELL","","2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","App","startGame","gameOver","handleKeyPress","_ref","keyCode","moveCellsLeft","moveCellsUp","moveCellsRight","moveCellsDown","handleTouchStart","e","startX","changedTouches","clientX","startY","clientY","handleTouchMove","distX","distY","diffY","diffX","addRandomTwo","max","randRow","generateRandomInteger","randColumn","addColorCell","document","querySelectorAll","forEach","el","keys","el2","innerHTML","getArrayfromSumDoubleCells","addCellsOrStartNewGame","alert","min","rand","Math","random","round","tempScore","isNull","arrScore","includes","addEventListener","removeEventListener","_this$state","components_Heading_Heading","components_GameContainer_GameContainer","ReactDOM","render","components_App_App","getElementById"],"mappings":"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","file":"static/js/main.533b4806.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Heading.scss\";\n\nclass Heading extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bestScore: 0\n    };\n    this.localStorage = window.localStorage;\n  }\n\n  componentDidMount() {\n    const bestScore = this.localStorage.getItem(\"bestScore\");\n    this.setState({ bestScore });\n  }\n\n  componentDidUpdate() {\n    const { score } = this.props;\n    const { bestScore } = this.state;\n    if (score > bestScore) {\n      this.localStorage.setItem(\"bestScore\", score);\n      const bestScore = this.localStorage.getItem(\"bestScore\");\n      this.setState({ bestScore });\n    }\n  }\n\n  render() {\n    const { startNewGame, score } = this.props;\n    const { bestScore } = this.state;\n\n    return (\n      <div className=\"heading\">\n        <h1 className=\"title\">2048</h1>\n        <a className=\"restart-btn\" onClick={startNewGame}>\n          New Game\n        </a>\n        <div className=\"scores-container\">\n          <div className=\"score-container\">{score}</div>\n          <div className=\"best-container\">{bestScore}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Heading;\n","import React, { Component } from \"react\";\nimport \"./GameContainer.scss\";\n\nconst GameContainer = props => {\n  const { cells } = props;\n\n  return (\n    <div className=\"game-container\">\n      {cells.map((row, i) => (\n        <div key={i} className=\"row\">\n          {row.map((cell, j) => (\n            <div key={j} className=\"cell\">\n              {cell}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GameContainer;\n","export const sumDoubleCells = arr => {\r\n  const arrLength = arr.length;\r\n  let score = 0;\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      for (let j = i + 1; j < arr.length; j++) {\r\n        if (arr[i] === arr[j]) {\r\n          const sum = arr[i] + arr[j];\r\n          score += sum;\r\n          arr.splice(i, 1, sum);\r\n          arr.splice(j, 1);\r\n          j = arr.length;\r\n        } else {\r\n          if (arr[j] !== null) {\r\n            j = arr.length;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      arr.splice(i, 1);\r\n      i--;\r\n    }\r\n  }\r\n\r\n  if (arr.length < arrLength) {\r\n    for (let i = arr.length; i < arrLength; i++) {\r\n      arr.push(null);\r\n    }\r\n  }\r\n  return { arr, score };\r\n};\r\n\r\nexport const rotate90 = arr => {\r\n  const rotateArr = [[], [], [], []];\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    for (let j = 0; j < arr.length; j++) {\r\n      rotateArr[j][i] = arr[i][arr.length - 1 - j];\r\n    }\r\n  }\r\n\r\n  return rotateArr;\r\n};\r\n","export const ARROW_LEFT = 37;\r\nexport const ARROW_UP = 38;\r\nexport const ARROW_RIGHT = 39;\r\nexport const ARROW_DOWN = 40;\r\n\r\nexport const START_INT = 2;\r\n\r\nexport const COLOR_CELL = {\r\n  \"\": \"cell\",\r\n  \"2\": \"cell cell-2\",\r\n  \"4\": \"cell cell-4\",\r\n  \"8\": \"cell cell-8\",\r\n  \"16\": \"cell cell-16\",\r\n  \"32\": \"cell cell-32\",\r\n  \"64\": \"cell cell-64\",\r\n  \"128\": \"cell cell-128\",\r\n  \"256\": \"cell cell-256\",\r\n  \"512\": \"cell cell-512\",\r\n  \"1024\": \"cell cell-1024\",\r\n  \"2048\": \"cell cell-2048\",\r\n  \"4096\": \"cell cell-4096\",\r\n  \"8192\": \"cell cell-8192\",\r\n  \"16384\": \"cell cell-16384\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport { Heading } from \"../Heading\";\r\nimport { GameContainer } from \"../GameContainer\";\r\nimport { sumDoubleCells, rotate90 } from \"../../utils/helpers\";\r\nimport {\r\n  ARROW_LEFT,\r\n  ARROW_UP,\r\n  ARROW_RIGHT,\r\n  ARROW_DOWN,\r\n  START_INT,\r\n  COLOR_CELL\r\n} from \"../../utils/variables\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cells: [\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null]\r\n    ],\r\n    score: 0,\r\n    startGame: true,\r\n    gameOver: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n    document.addEventListener(\"touchstart\", this.handleTouchStart);\r\n    document.addEventListener(\"touchend\", this.handleTouchMove, false);\r\n    this.setState({ startGame: true });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.startGame) {\r\n      this.addRandomTwo();\r\n      this.addRandomTwo();\r\n      this.setState({ startGame: false });\r\n    }\r\n\r\n    this.addColorCell();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n\r\n  handleKeyPress = ({ keyCode }) => {\r\n    if (keyCode === ARROW_LEFT) {\r\n      this.moveCellsLeft();\r\n    } else if (keyCode === ARROW_UP) {\r\n      this.moveCellsUp();\r\n    } else if (keyCode === ARROW_RIGHT) {\r\n      this.moveCellsRight();\r\n    } else if (keyCode === ARROW_DOWN) {\r\n      this.moveCellsDown();\r\n    }\r\n  };\r\n\r\n  handleTouchStart = e => {\r\n    this.setState({ startX: e.changedTouches[0].clientX });\r\n    this.setState({ startY: e.changedTouches[0].clientY });\r\n  };\r\n\r\n  handleTouchMove = e => {\r\n    let distX = e.changedTouches[0].clientX - this.state.startX;\r\n    let distY = e.changedTouches[0].clientY - this.state.startY;\r\n    let diffY = -30 < distY && distY < 30;\r\n    let diffX = -30 < distX && distX < 30;\r\n\r\n    if (distX < 0 && diffY) {\r\n      this.moveCellsLeft();\r\n    } else if (distX > 0 && diffY) {\r\n      this.moveCellsRight();\r\n    } else if (distY < 0 && diffX) {\r\n      this.moveCellsUp();\r\n    } else if (distY > 0 && diffX) {\r\n      this.moveCellsDown();\r\n    }\r\n    // console.log(\"distX\", distX);\r\n    // console.log(\"distY\", distY);\r\n    // console.log(\"diffY\", diffY);\r\n    // console.log(\"diffX\", diffX);\r\n  };\r\n\r\n  startNewGame = () => {\r\n    const cells = [\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null]\r\n    ];\r\n    this.setState({ cells, startGame: true, gameOver: false, score: 0 });\r\n  };\r\n\r\n  addRandomTwo = () => {\r\n    const { cells } = this.state;\r\n    const min = 0;\r\n    const max = cells.length - 1;\r\n    const randRow = this.generateRandomInteger(min, max);\r\n    const randColumn = this.generateRandomInteger(min, max);\r\n\r\n    if (cells[randRow][randColumn] === null) {\r\n      cells[randRow][randColumn] = START_INT;\r\n      this.setState({ cells });\r\n    } else {\r\n      this.addRandomTwo();\r\n    }\r\n  };\r\n\r\n  addColorCell = () => {\r\n    const cells = document.querySelectorAll(\".cell\");\r\n    cells.forEach(el => {\r\n      Object.keys(COLOR_CELL).forEach(el2 => {\r\n        if (el.innerHTML === el2) {\r\n          el.className = COLOR_CELL[el2];\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  moveCellsLeft = () => {\r\n    let { cells } = this.state;\r\n    cells = this.getArrayfromSumDoubleCells(cells);\r\n    this.addCellsOrStartNewGame(cells);\r\n  };\r\n\r\n  moveCellsUp = () => {\r\n    let { cells } = this.state;\r\n    cells = rotate90(cells);\r\n    cells = this.getArrayfromSumDoubleCells(cells);\r\n    for (let i = 0; i < 3; i++) {\r\n      cells = rotate90(cells);\r\n    }\r\n    this.addCellsOrStartNewGame(cells);\r\n  };\r\n\r\n  moveCellsRight = () => {\r\n    let { cells } = this.state;\r\n    cells = rotate90(cells);\r\n    cells = rotate90(cells);\r\n    cells = this.getArrayfromSumDoubleCells(cells);\r\n    cells = rotate90(cells);\r\n    cells = rotate90(cells);\r\n    this.addCellsOrStartNewGame(cells);\r\n  };\r\n\r\n  moveCellsDown = () => {\r\n    let { cells } = this.state;\r\n    for (let i = 0; i < 3; i++) {\r\n      cells = rotate90(cells);\r\n    }\r\n    cells = this.getArrayfromSumDoubleCells(cells);\r\n    cells = rotate90(cells);\r\n    this.addCellsOrStartNewGame(cells);\r\n  };\r\n\r\n  addCellsOrStartNewGame = arr => {\r\n    if (!this.state.gameOver) {\r\n      this.setState({ cells: arr });\r\n      this.addRandomTwo();\r\n    } else {\r\n      alert(\"Game Over\");\r\n      this.startNewGame();\r\n    }\r\n  };\r\n\r\n  generateRandomInteger = (min, max) => {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n  };\r\n\r\n  getArrayfromSumDoubleCells = arr => {\r\n    let { score } = this.state;\r\n    const tempScore = score;\r\n    let isNull = false;\r\n\r\n    arr.map(cell => {\r\n      const arrScore = sumDoubleCells(cell);\r\n      score += arrScore.score;\r\n      this.setState({ score });\r\n      if (cell.includes(null)) {\r\n        isNull = true;\r\n      }\r\n      return arrScore.arr;\r\n    });\r\n\r\n    if (isNull || tempScore !== score) {\r\n      return arr;\r\n    } else {\r\n      this.setState({ gameOver: true });\r\n      return arr;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { cells, score } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Heading startNewGame={this.startNewGame} score={score} />\r\n        <GameContainer cells={cells} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}